#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(dirname "$0")/.."
TARGETS=${ROOT_DIR}/etc/targets.json

MAIL_CMD="msmtp --from=gemini-healthchecker@shit.cx"
LOG_LEVEL=info
DRY_MODE=false

ENDPOINT_IDS=( $(jq -r .[].id "${TARGETS}") )

_debug() {
  [[ ${LOG_LEVEL} == "debug" ]] && echo "$1: $2" || true
}

_info() {
  if [[ ${LOG_LEVEL} == "debug" ]] || [[ ${LOG_LEVEL} == "info" ]]; then
    echo "$1: $2"
  fi
}

_fetch_config() {
  jq --arg id "$1" '.[] | select(.id == $id)' "${TARGETS}"
}

_lock() {
  _debug $1 "locking for $2 seconds"
  redis-cli SET "L-$1" "lock" EX "$2" >/dev/null || true
}

_locked() {
  _debug $1 "checking for lock"
  [[ -n "$(redis-cli --raw GET "L-$1")" ]]
  return $?
}

_fail() {
  redis-cli INCR "F-$1" >/dev/null

  local count
  local retries
  local check_frequency
  count=$(redis-cli --raw GET "F-$1")
  retries=$(_fetch_config "$1" | jq .retries)
  check_frequency=$(_fetch_config "$1" | jq .check_frequency)

  _info $1 "recording failure #${count}"

  if [[ "${count}" -lt "${retries}" ]]; then
    _info $1 "checking for quick recovery"
    _lock "$1" 5
  elif [[ "${count}" -eq "${retries}" ]]; then
    _raise_failure_alarm "$1"
    _lock "$1" "${check_frequency}"
  else
    _lock "$1" "${check_frequency}"
  fi
}

_raise_failure_alarm() {
  local target
  target="$(_fetch_config "$1" | jq -r .target)"
  _send_email "$1" \
    "Failure of ${target} was detected" \
    "${target} has entered an alarm state"
}

_raise_recovery_alarm() {
  local target
  target="$(_fetch_config "$1" | jq -r .target)"
  _send_email "$1" \
    "Recovery of ${target} was detected" \
    "${target} has recovered since failing at $(_last_success $1)."
}

_last_success() {
  date -u --date="@$(redis-cli --raw GET "LS-$1")" --iso-8601=seconds
}

_send_email() {
  local email
  email="$(_fetch_config "$1" | jq -r .email)"
  _info $1 "notifying ${email} that $3"
  echo -e "Subject: $2\n\n$3" | ${MAIL_CMD} -- ${email}
}

_succeed() {
  local count
  count=$(redis-cli --raw GET "F-$1")
  if [[ ${count} -gt 0 ]] && [[ ${count} -lt 5 ]]; then
    _info $1 "a quick recovery was achieved"
  elif [[ ${count} -ge 5 ]]; then
    _raise_recovery_alarm "$1"
  fi

  redis-cli SET "F-$1" 0 >/dev/null
  redis-cli SET "LS-$1" "$(date +%s)" >/dev/null  # last success
  _lock "$1" "$(_fetch_config "$1" | jq .check_frequency)"
}

_test() {
  local target
  target="$(_fetch_config "$1" | jq -r .target)"
  _info $1 "testing ${target}"
  redis-cli SET "LT-$1" "$(date +%s)" >/dev/null  # last test
  if ${DRY_MODE}; then
    _info $1 "testing using dry mode"
    return $((RANDOM%3))
  else
    [[ $(${ROOT_DIR}/bin/gmni -j once -I "$target" 2> /dev/null | awk '{ print $1 }') -eq 20 ]]
    return $?
  fi
}

while true; do
  for id in "${ENDPOINT_IDS[@]}"; do
    _locked "$id" && continue

    if _test "$id"; then
      _succeed "$id"
    else
      _fail "$id"
    fi
  done
  sleep 1
done
