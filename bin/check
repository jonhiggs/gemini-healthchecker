#!/usr/bin/env bash
TARGET=$1
TIMEOUT=${2:-2}
RECHECKS=${3:-5}
RECHECK_INTERVAL=${4:-5}
HOST="$(echo "${TARGET}" | cut -d/ -f3 | sed 's/:[0-9]*$//')"
PORT="$(echo "${TARGET}" | cut -d/ -f3 | awk -F: '(NF==2){print $2} (NF==1){print 1965}')"
REMOTE_PATH="/$(echo ${TARGET} | cut -d/ -f4-)"
RUNDIR="${RUNDIR:-${HOME}/.local/share/gemini-healthchecker/${HOST}:${PORT}}"
MAILFROM="healthchecker@shit.cx"
NTFY_TOPIC="gemini-healthchecker"

set -euo pipefail

_usage()        { echo "Usage: $(basename "$0") TARGET [TIMEOUT] [RECHECKS] [RECHECK_INTERVAL]"; }
_is_up()        { [[ $(tail -n1 "${RUNDIR}/state") -eq 20 ]]; }
_is_down()      { ! _is_up; }
_was_up()       { [[ $(tail -n1 "${RUNDIR}/last_state") -eq 20 ]]; }
_was_down()     { ! _was_up; }
_last_success() { eval $(stat -s "${RUNDIR}/last_success"); echo ${st_mtime}; }
_print_date()   { [[ $# -eq 1 ]] && OPTS="-r $1"; set +u; date -u ${OPTS} +%Y-%m-%dT%H:%M:%S%z; set -u; }
_test_target()  { _gemini_status_code >> "${RUNDIR}/state"; }
_check_dep()    { command -v "$1" &>/dev/null || _error "$1: command not found"; }
_error()        { echo -e "$@" >&2 && exit 1; }
_locked()       { [[ -f "${RUNDIR}/lock" ]]; }
_lock()         { touch "${RUNDIR}/lock"; }
_unlock()       { rm -f "${RUNDIR}/lock"; }
_mail()         { cat | mail -r "${MAILFROM}" -s "$1" "${MAILTO}"; }

_ntfy() {
  [[ -z ${NTFY_TOPIC} ]] && return 0 ]]
  cat \
    | curl \
      -H "Title: $1" \
      -H "Priority: ${2:-urgent}" \
      -d @- ntfy.sh/${NTFY_TOPIC} \
      2>&1 > /dev/null
}

_gemini_status_code() {
  _check_dep "gemget"
  gemget gemini://${HOST}${REMOTE_PATH} -t ${TIMEOUT} --header -o /dev/null 2>/dev/null \
    | grep ^Header \
    | awk '{ print $2 }' \
    || echo 0
}

[[ $# -eq 0 ]] || [[ $# -gt 4 ]] && _usage && exit 1
[[ "$*" =~ --help ]]             && _usage && exit 0
[[ ${TARGET} =~ ^gemini:// ]]    || _error "TARGET must have a gemini protocol"
[[ -z ${MAILTO} ]]               && _error "MAILTO was not provided"

mkdir -p "${RUNDIR}"
if _locked; then
  _error "Lockfile exists for ${TARGET}\n\nTimeout is too long, or checks are too frequent. Adjust to prevent overlapping checks."
else
  _lock
fi

trap '_unlock' 1 2 3 6 9 15

if [[ -f "${RUNDIR}/state" ]]; then
  mv "${RUNDIR}/state" "${RUNDIR}/last_state"
else
  echo 20 > "${RUNDIR}/last_state"  # assume it's ok
fi
touch "${RUNDIR}/state"

for ((i=1;i<=RECHECKS;i++)); do
  _test_target
  _is_up && touch "${RUNDIR}/last_success" && break
  echo "${TARGET} has failed to respond. Will retry in ${RECHECK_INTERVAL} seconds" | _ntfy "Retry $i/${RECHECKS}" "low"
  sleep "${RECHECK_INTERVAL}"
done

if _is_up && _was_down; then
  echo "${TARGET} has recovered since failing at $(_print_date $(_last_success))" \
    | _mail "${TARGET} has recovered"
  echo "${TARGET} has recovered" | _ntfy "Recovery" "low"
elif _is_down && _was_up; then
  echo "${TARGET} has entered an alarm state at $(_print_date)" \
    | _mail "${TARGET} has failed"
  echo "${TARGET} has failed" | _ntfy "Failure" "urgent"
fi

_unlock
